require(DMwR)
outlier_taxi <- lofactor(outlier, k=5)
outlier_taxi <- lofactor(outlier, k=14)
outlier_taxi <- lofactor(outlier, k=1)
outlier <- taxi[,1:]
outlier <- taxi[,1:10]
outlier_taxi <- lofactor(outlier, k=1)
outlier <- taxi[,1:n]
n <- nrow(taxi)
labels <- 1:n
labels[-outliers]<_ "."
labels[-outliers]<- "."
d_cor <- as.matrix(coor(d))
d_cor <- as.matrix(cor(d))
d_cor <- as.matrix(cor(taxi))
cor <- taxi[(nrow(taxi), 3000),]
cor <- taxi[sample(nrow(taxi), 3000),]
cor <- taxi[sample(nrow(taxi), 1000),]
pairs.panel(cor)
pairs.panels(cor)
require(dplyr)
pairs.panels(cor)
require(psych)
install.packages("psych")
reqyure(psych)
require(psych)
pairs.panels(cor)
require(tidyr)
require(plyr)
require(ggplot2)
require(tidyr)
require(plyr)
require(ggplot2)
install.packages("tidyr")
require(tidyr)
results <- df_response %>% gather('Age in City','Results', 2:5)
results_clean <- results %>% separate("Age in City, c("City","Age"), sep = " ")
require(tidyr)
require(plyr)
require(ggplot2)
response <- c('Yes', 'No')
young_edinburgh <- c(80100, 35900)
older_edinburgh <- c(143000, 214800)
young_glasgow <- c(99400, 150400)
older_glasgow <- c(43000, 207000)
df_response <- data.frame(response, young_edinburgh,
older_edinburgh, young_glasgow,
older_glasgow)
colnames(df_response) <- c("Yes_No", "Edinburgh 16-24","Edinburgh 25+", "Glasgow 16-24", "Glasgow 25+")
head(df_response)
tidyData <-gather(df_response, city.agerange, response, young_edinburgh:older_glasgow)
View(df_response)
require(tidyr)
assign5.tidy.df <- df_response %>%
#set key, votecount and the cols to be gathered
gather(key, votecount, young_edinburgh:older_glasgow) %>%
#split the key column into two columns based on the values in the key column
separate(key, c("city", "agegroup"), 1)
#print the contents of the tidy data frame to the console
assign5.tidy.df
tidyData <-gather(df_response, city.agerange, responses, young_edinburgh:older_glasgow)
tidyData <- separate(tidyData, city.agerange, c("city", "agerange"), convert=FALSE)
---
title: "Week 5 Assignment"
author: "Ben Arancibia"
date: "September 30, 2014"
output: html_document
---
__*Question 1*__
Three questions that I want answer based on the data presented in the assignment are: \n
1: What are the total populations for each city so that the proportion for each response can be calculated.
2: What proportion of the respondents in each city voted yes or no?
3: What proportion of the respondents in each age group voted yes or no?
In order for questions 2 and 3 to be answered, you need the answer for question one.
__*Question 2*__
```{r}
require(tidyr)
require(plyr)
require(ggplot2)
```
Create a dataframe to save this data in its current messy state.
```{r}
response <- c('Yes', 'No')
young_edinburgh <- c(80100, 35900)
older_edinburgh <- c(143000, 214800)
young_glasgow <- c(99400, 150400)
older_glasgow <- c(43000, 207000)
```
Now create a dataframe
```{r}
messy <- data.frame(response.types,
edinburgh.1624,
edinburgh.25,
glasgow.1624,
glasgow.25)
head(messy)
```
__*Question 3*__
Use the functionality in the *tidyr* package to convert the data frame to be "tidy data".
```{r}
tidyData <-gather(messy, city.agerange, responses, edinburgh.1624:glasgow.25)
tidyData <- separate(tidyData, city.agerange, c("city", "agerange"), convert=FALSE)
tidyData <- extract(tidyData, agerange, c("lower", "upper"), regex="^(\\d{2})(\\d{2})?", convert=TRUE)
# Show me.
head(tidyData, n=10)
summary(tidyData)
```
```
---
require(tidyr)
require(plyr)
require(ggplot2)
dir.vec1 <- c("yes", "no")
ed.vec1 <- c(80100, 35900)
ed.vec2 <- c(143000, 214800)
gl.vec1 <- c(99400, 43000)
gl.vec2 <- c(150400, 207000)
---
#Question 1
#Three questions that I want answer based on the data presented in the assignment are:
#1: What are the total populations for each city so that the proportion for each response can be calculated.
#2: What proportion of the respondents in each city voted yes or no?
#3: What proportion of the respondents in each age group voted yes or no?
#In order for questions 2 and 3 to be answered, you need the answer for question one.
#Question 2
require(tidyr)
require(plyr)
require(ggplot2)
#Create a dataframe to save this data in its current messy state.
dir.vec1 <- c("yes", "no")
ed.vec1 <- c(80100, 35900)
ed.vec2 <- c(143000, 214800)
gl.vec1 <- c(99400, 43000)
gl.vec2 <- c(150400, 207000)
#Now create a dataframe
assign5.df <- data.frame("votedir" = dir.vec1, "e1624" = ed.vec1,"e25up" = ed.vec2,"g1624" = gl.vec1,"g25up" = gl.vec2)
assign5.df
#Question 3
#Use the functionality in the *tidyr* package to convert the data frame to be "tidy data".
assign5.tidy.df <- assign5.df %>%
#set key, votecount and the cols to be gathered
gather(key, votecount, e1624:g25up) %>%
#split the key column into two columns based on the values in the key column
separate(key, c("city", "agegroup"), 1)
#print the contents of the tidy data frame to the console
assign5.tidy.df
require(tidyr)
require(tidyr)
require(dplyr)
require(ggplot2)
---
title: "Week 5 Assignment"
author: "Ben Arancibia"
date: "September 30, 2014"
output: html_document
---
#Question 1
#Three questions that I want answer based on the data presented in the assignment are:
#1: What are the total populations for each city so that the proportion for each response can be calculated.
#2: What proportion of the respondents in each city voted yes or no?
#3: What proportion of the respondents in each age group voted yes or no?
#In order for questions 2 and 3 to be answered, you need the answer for question one.
#Question 2
require(tidyr)
require(dplyr)
require(ggplot2)
#Create a dataframe to save this data in its current messy state.
dir.vec1 <- c("yes", "no")
ed.vec1 <- c(80100, 35900)
ed.vec2 <- c(143000, 214800)
gl.vec1 <- c(99400, 43000)
gl.vec2 <- c(150400, 207000)
#Now create a dataframe
assign5.df <- data.frame("votedir" = dir.vec1, "e1624" = ed.vec1,"e25up" = ed.vec2,"g1624" = gl.vec1,"g25up" = gl.vec2)
assign5.df
#Question 3
#Use the functionality in the *tidyr* package to convert the data frame to be "tidy data".
assign5.tidy.df <- assign5.df %>%
#set key, votecount and the cols to be gathered
gather(key, votecount, e1624:g25up) %>%
#split the key column into two columns based on the values in the key column
separate(key, c("city", "agegroup"), 1)
#print the contents of the tidy data frame to the console
assign5.tidy.df
---
---
title: "Week 5 Assignment"
author: "Ben Arancibia"
date: "September 30, 2014"
output: html_document
---
#Question 1
#Three questions that I want answer based on the data presented in the assignment are:
#1: What are the total populations for each city so that the proportion for each response can be calculated.
#2: What proportion of the respondents in each city voted yes or no?
#3: What proportion of the respondents in each age group voted yes or no?
#In order for questions 2 and 3 to be answered, you need the answer for question one.
#Question 2
require(tidyr)
require(dplyr)
require(ggplot2)
#Create a dataframe to save this data in its current messy state.
response <- c("yes", "no")
edinburgh_young <- c(80100, 35900)
edinburgh_old <- c(143000, 214800)
glasgow_young <- c(99400, 43000)
glasgow_old <- c(150400, 207000)
#Now create a dataframe
assign5.df <- data.frame("votedir" = dir.vec1, "e1624" = ed.vec1,"e25up" = ed.vec2,"g1624" = gl.vec1,"g25up" = gl.vec2)
assign5.df
#Question 3
#Use the functionality in the *tidyr* package to convert the data frame to be "tidy data".
assign5.tidy.df <- assign5.df %>%
#set key, votecount and the cols to be gathered
gather(key, votecount, e1624:g25up) %>%
#split the key column into two columns based on the values in the key column
separate(key, c("city", "agegroup"), 1)
#print the contents of the tidy data frame to the console
assign5.tidy.df
assign5.df <- data.frame("votedir" = response, "Edinburgh16_24" = edinburgh_young,"Edinburgh_25" = edinburgh_old,"Glasgow16_24" = glasgow_young,"Glasgow_25" = glasgow_old)
assign5.df
assign5.tidy.df <- assign5.df %>%
#set key, votecount and the cols to be gathered
gather(key, votecount, Edinburgh16_24:Glasgow_25) %>%
#split the key column into two columns based on the values in the key column
separate(key, c("city", "agegroup"), 1)
#print the contents of the tidy data frame to the console
assign5.tidy.df
assign5.df <- data.frame("Vote Response" = response, "Edinburgh16_24" = edinburgh_young,"Edinburgh_25" = edinburgh_old,"Glasgow16_24" = glasgow_young,"Glasgow_25" = glasgow_old)
assign5.tidy.df <- assign5.df %>% gather(key, votecount, Edinburgh16_24:Glasgow_25) %>% separate(key, c("city", "agegroup"), 1)
assign5.tidy.df
poll_results2 <- df_response %>%
gather('City_Age','Results', 2:5)
poll_results3 <- poll_results2 %>%
separate("City_Age", c("City","Age"), sep = " ")
#Use the functionality in the *tidyr* package to convert the data frame to be "tidy data".
---
title: "Week 5 Assignment"
author: "Ben Arancibia"
date: "September 30, 2014"
output: html_document
---
#Question 1
#Three questions that I want answer based on the data presented in the assignment are:
#1: What are the total populations for each city so that the proportion for each response can be calculated.
#2: What proportion of the respondents in each city voted yes or no?
#3: What proportion of the respondents in each age group voted yes or no?
#In order for questions 2 and 3 to be answered, you need the answer for question one.
#Question 2
require(tidyr)
require(dplyr)
require(ggplot2)
#Create a dataframe to save this data in its current messy state.
response <- c("yes", "no")
edinburgh_young <- c(80100, 35900)
edinburgh_old <- c(143000, 214800)
glasgow_young <- c(99400, 43000)
glasgow_old <- c(150400, 207000)
#Now create a dataframe
df_response <- data.frame("Vote Response" = response, "Edinburgh16_24" = edinburgh_young,"Edinburgh_25" = edinburgh_old,"Glasgow16_24" = glasgow_young,"Glasgow_25" = glasgow_old)
df_response
#Question 3
#Use the functionality in the *tidyr* package to convert the data frame to be "tidy data".
poll_results2 <- df_response %>%
gather('City_Age','Results', 2:5)
poll_results3 <- poll_results2 %>%
separate("City_Age", c("City","Age"), sep = " ")
View(poll_results2)
View(poll_results2)
---
title: "Week 5 Assignment"
author: "Ben Arancibia"
date: "September 30, 2014"
output: html_document
---
#Question 1
#Three questions that I want answer based on the data presented in the assignment are:
#1: What are the total populations for each city so that the proportion for each response can be calculated.
#2: What proportion of the respondents in each city voted yes or no?
#3: What proportion of the respondents in each age group voted yes or no?
#In order for questions 2 and 3 to be answered, you need the answer for question one.
#Question 2
require(tidyr)
require(dplyr)
require(ggplot2)
#Create a dataframe to save this data in its current messy state.
response <- c("yes", "no")
edinburgh_young <- c(80100, 35900)
edinburgh_old <- c(143000, 214800)
glasgow_young <- c(99400, 43000)
glasgow_old <- c(150400, 207000)
#Now create a dataframe
df_response <- data.frame("Vote Response" = response, "Edinburgh:16_24" = edinburgh_young,"Edinburgh:25" = edinburgh_old,"Glasgow:16_24" = glasgow_young,"Glasgow:25" = glasgow_old)
df_response
#Question 3
#Use the functionality in the *tidyr* package to convert the data frame to be "tidy data".
poll_results2 <- df_response %>%
gather('City_Age','Results', 2:5)
poll_results3 <- poll_results2 %>%
separate("City_Age", c("City","Age"), sep = ":")
View(poll_results2)
df_response <- data.frame("Vote Response" = response, "Edinburgh 16-24" = edinburgh_young,"Edinburgh 25" = edinburgh_old,"Glasgow 16-24" = glasgow_young,"Glasgow 25" = glasgow_old)
df_response
poll_results2 <- df_response %>%
gather('City_Age','Results', 2:5)
poll_results3 <- poll_results2 %>%
separate("City_Age", c("City","Age"), sep = " ")
poll_results3 <- poll_results2 %>%
separate("City_Age", c("City","Age"), sep = ".")
assign5.tidy.df <- df_response %>%
#set key, votecount and the cols to be gathered
gather(key, votecount, e1624:g25up) %>%
#split the key column into two columns based on the values in the key column
separate(key, c("city", "agegroup"), 1)
#print the contents of the tidy data frame to the console
assign5.tidy.df
df_response <- data.frame("Vote Response" = response, "E16-24" = edinburgh_young,"E25" = edinburgh_old,"G16-24" = glasgow_young,"G25" = glasgow_old)
assign5.tidy.df <- df_response %>%
#set key, votecount and the cols to be gathered
gather(key, votecount, e1624:g25up) %>%
#split the key column into two columns based on the values in the key column
separate(key, c("city", "agegroup"), 1)
#print the contents of the tidy data frame to the console
assign5.tidy.df
df_response
df_response <- data.frame("Vote Response" = response, "E16_24" = edinburgh_young,"E25" = edinburgh_old,"G16_24" = glasgow_young,"G25" = glasgow_old)
df_response
assign5.tidy.df <- df_response %>%
#set key, votecount and the cols to be gathered
gather(key, votecount, E16_24:G25) %>%
#split the key column into two columns based on the values in the key column
separate(key, c("city", "agegroup"), 1)
#print the contents of the tidy data frame to the console
assign5.tidy.df
totalRespondents <- sum(tidy_df[, "votecount"])
tidy_df <- df_response %>% gather(key, votecount, E16_24:G25) %>% separate(key, c("city", "agegroup"), 1)
tidy_df
totalRespondents <- sum(tidy_df[, "votecount"])
totalRespondents
---
title: "Week 5 Assignment"
author: "Ben Arancibia"
date: "September 30, 2014"
output: html_document
---
#Question 1
#Three questions that I want answer based on the data presented in the assignment are:
#1: What are the total populations for each city so that the proportion for each response can be calculated.
#2: What proportion of the respondents in each city voted yes or no?
#3: What proportion of the respondents in each age group voted yes or no?
#In order for questions 2 and 3 to be answered, you need the answer for question one.
#Question 2
require(tidyr)
require(dplyr)
require(ggplot2)
#Create a dataframe to save this data in its current messy state.
response <- c("yes", "no")
edinburgh_young <- c(80100, 35900)
edinburgh_old <- c(143000, 214800)
glasgow_young <- c(99400, 43000)
glasgow_old <- c(150400, 207000)
#Now create a dataframe
df_response <- data.frame("Vote Response" = response, "E16_24" = edinburgh_young,"E25" = edinburgh_old,"G16_24" = glasgow_young,"G25" = glasgow_old)
df_response
#Question 3
#Use the functionality in the *tidyr* package to convert the data frame to be "tidy data".
tidy_df <- df_response %>% gather(key, votecount, E16_24:G25) %>% separate(key, c("city", "agegroup"), 1)
tidy_df
#Question 4
#Use the *plyr* package to answer the questions asked in number 1
#1: What are the total populations for each city so that the proportion for each response can be calculated.
total_pop <- sum(tidy_df[, "votecount"])
total_pop
city_sum <- plyr::ddply(tidy_df, "city", plyr::summarize, total = sum(responses), .inform=TRUE)
city_sum <- plyr::ddply(tidy_df, "city", plyr::summarize, total = sum(votecount), .inform=TRUE)
city_sum
sum_response_city <- plyr::ddply(tidy_df, c("city", "response"), plyr::summarize, sum = sum(votecount), .inform=TRUE)
sum_response_city
cityProportionYesNo <- plyr::ddply(sum_response_city, c("city", "response"), plyr::summarize, proportion = sum / total)
total_pop <- sum(tidy_df[, "votecount"])
total_pop
city_sum <- plyr::ddply(tidy_df, "city", plyr::summarize, total = sum(votecount), .inform=TRUE)
sum_response_city <- plyr::ddply(tidy_df, c("city", "response"), plyr::summarize, sum = sum(votecount), .inform=TRUE)
cityProportionYesNo <- plyr::ddply(sum_response_city, c("city", "response"), plyr::summarize, proportion = sum / total)
cityProportionYesNo <- plyr::ddply(sum_response_city, c("city", "response"), plyr::summarize, proportion = sum / sum(votecount))
cityProportionYesNo <- plyr::ddply(sum_response_city, c("city", "response"), plyr::summarize, proportion = sum/total)
sum_response_city
age_function <- function(input)
{
sum(input$votecount[which(data$response == "yes")])
}
yes_votes_age<- ddply(tidy_df, .variables = "agegroup", .fun = age_function)
require(plyr)
age_function <- function(input)
{
sum(input$votecount[which(data$response == "yes")])
}
yes_votes_age<- ddply(tidy_df, .variables = "agegroup", .fun = age_function)
tidy_df <- df_response %>% gather(key, votecount, E16_24:G25) %>% separate(key, c("city", "agegroup"), 1)
tidy_df
age_function <- function(input)
{
sum(input$votecount[which(input$response == "yes")])
}
yes_votes_age<- ddply(tidy_df, .variables = "agegroup", .fun = age_function)
yes_votes_age
tidy_df
age_function <- function(data)
{
sum(data$votecount[which(data$response == "yes")])
}
yes_votes_age<- ddply(tidy_df, .variables = "agegroup", .fun = age_function)
yes_votes_age
age_function <- function(data)
{
sum(data$votecount[which(data$vote.response == "yes")])
}
yes_votes_age<- ddply(tidy_df, .variables = "agegroup", .fun = age_function)
yes_votes_age
age_function <- function(data)
{
sum(data$votecount[which(data$vote.response == "yes")])
}
age_function <- function(data)
{
sum(data$votecount[which(data$response == "yes")])
}
yes_votes_age<- ddply(tidy_df, .variables = "agegroup", .fun = age_function)
yes_votes_age
sum_response_city
city_sum
install.packages(c("shiny", "maps", "geosphere"), repos="http://cran.rstudio.com/")
library(shiny)
install.packages(c("shiny", "maps", "geosphere"), repos="http://cran.rstudio.com/")
install.packages(c("shiny", "maps", "geosphere"), repos = "http://cran.rstudio.com/")
library(shiny)
runGitHub("shiny-salesman", "toddwschneider")
install.packages('googleVis')
library(devtools)
install_github("mages/googleVis")
library(googleVis)
?googleVis
demo(googleVis)
install.packages("XML")
require(XML)
theURL <- "http://www.jaredlander.com/2012/02/another-kind-of-super-bowl-pool/"
bowlPool <- readHTMLTable(theURL, which = 1, header = FALSE, stringsAsFactors = FALSE)
bowlPool
bowlPool
class(bowlpool)
class(bowlPool)
theURL <- "http://www.w3schools.com/html/html_tables.asp"
hvalues <- readHTMLTable(theURL)
class(hvalues)
length(hvalues)
Names_df <- readHTMLTable(theURL, which = 1, header = TRUE, stringsAsFactors = FALSE)
Names_df
modified_names_df <- Names_df[, c('Last Name', 'Points')
}
modified_names_df <- Names_df[, c('Last Name', 'Points')]
modified_names_df
new_url <- 'http://en.wikipedia.org/wiki/Departments_of_Honduras'
new_table <- readHTMLTable(new_url)
length(new_table)
drop workspace
p <- c(1, 5, 13, 17)
(Atp <- t(A) %*% p)
A <- matrix(c(1,1,1,1,0,1,3,4), ncol=2)
b <- c(0,8,8,19)
A
b
---
title: "Week 5 Assignment"
author: "Ben Arancibia"
date: "October 4, 2014"
output: pdf_document
---
#Problem Set 1
__*Question 1*__
Script to compute $A^T$$A$ and $A^T$$b$
Use the given matrix in the Problem set which is unsolvable
```{r}
A <- matrix(c(1,1,1,1,0,1,3,4), ncol=2)
b <- c(0,8,8,19)
A
b
```
Compute $A^T$$A$
```{r}
(AtA <- t(A) %*% A)
```
Compute $A^T$$b$
```{r}
(Atb <- t(A) %*% b)
```
Solve for $\hat{x}$ by doing $A^T$$A$^{-1} divided by $A^T$$b$
```{r}
(solve(AtA) %*% Atb)
```
Compute the error $e$ give the change in the variable which is now $p$
```{r}
p <- c(1, 5, 13, 17)
(Atp <- t(A) %*% p)
(x_hat <- solve(AtA) %*% Atp)
(e <- p - A %*% x.hat)
```
data <- read.table("auto-mpg.data")
data <- read.table("auto-mpg.data")
setwd
data <- read.table("/users/bcarancibia/CUNY_IS_605/auto-mpg.data")
setwd('/users/bcarancibia/CUNY_IS_605')
data <- read.table("auto-mpg.data")
